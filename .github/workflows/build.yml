name: Build Native Addon

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  create-release:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.19.0'

      - name: Get package version
        id: package-version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
        shell: bash

      - name: Delete existing release
        run: |
          gh release delete v${{ steps.package-version.outputs.version }} --yes || true
          git push origin :refs/tags/v${{ steps.package-version.outputs.version }} || true
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          tag_name: v${{ steps.package-version.outputs.version }}
          name: Release v${{ steps.package-version.outputs.version }}
          draft: false
          prerelease: false
          generate_release_notes: true

      - name: Save upload URL
        run: echo "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ steps.create_release.outputs.id }}/assets{?name,label}" > upload_url.txt

      - name: Upload upload URL as artifact
        uses: actions/upload-artifact@v4
        with:
          name: upload-url
          path: upload_url.txt

  build-and-upload:
    needs: create-release
    runs-on: ${{ matrix.os }}
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
          - macos-latest
        arch:
          - x64
        include:
          - os: macos-latest
            arch: arm64
          - os: ubuntu-latest
            arch: arm64
          - os: ubuntu-latest
            arch: arm
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.19.0'

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools

      - name: Install cross-compilers for Linux ARM
        if: matrix.os == 'ubuntu-latest' && (matrix.arch == 'arm' || matrix.arch == 'arm64')
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf libc6-dev-armel-cross libc6-dev-armhf-cross          
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

      - name: Install dependencies
        run: npm install

      - name: Configure build for Unix
        if: matrix.os != 'windows-latest'
        run: |
          if [ "${{ matrix.os }}" == "ubuntu-latest" ] && [ "${{ matrix.arch }}" == "arm" ]; then
            export CC=arm-linux-gnueabihf-gcc
            export CXX=arm-linux-gnueabihf-g++
            export LINK=arm-linux-gnueabihf-g++
            npm run configure -- --arch=arm
          elif [ "${{ matrix.os }}" == "ubuntu-latest" ] && [ "${{ matrix.arch }}" == "arm64" ]; then
            export CC=aarch64-linux-gnu-gcc
            export CXX=aarch64-linux-gnu-g++
            export LINK=aarch64-linux-gnu-g++
            npm run configure -- --arch=arm64
          elif [ "${{ matrix.arch }}" != "x64" ]; then
            npm run configure -- --arch=${{ matrix.arch }}
          else
            npm run configure
          fi
        shell: bash

      - name: Configure build for Windows
        if: matrix.os == 'windows-latest'
        run: npm run configure
        shell: pwsh

      - name: Determine output directory (Unix)
        if: matrix.os != 'windows-latest'
        id: set-output-dir-unix
        run: |
          if [ "${{ matrix.os }}" == "macos-latest" ] && [ "${{ matrix.arch }}" == "x64" ]; then
            echo "output_dir=macos_x64" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.os }}" == "macos-latest" ] && [ "${{ matrix.arch }}" == "arm64" ]; then
            echo "output_dir=macos_arm64" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.os }}" == "ubuntu-latest" ] && [ "${{ matrix.arch }}" == "x64" ]; then
            echo "output_dir=linux_x64" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.os }}" == "ubuntu-latest" ] && [ "${{ matrix.arch }}" == "arm64" ]; then
            echo "output_dir=linux_arm64" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.os }}" == "ubuntu-latest" ] && [ "${{ matrix.arch }}" == "arm" ]; then
            echo "output_dir=linux_arm" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Determine output directory (Windows)
        if: matrix.os == 'windows-latest'
        id: set-output-dir-windows
        run: |
          if ("${{ matrix.arch }}" -eq "x64") {
            echo "output_dir=windows_x64" >> $env:GITHUB_OUTPUT
          }
        shell: pwsh

      - name: Check library format for ARM
        if: matrix.os == 'ubuntu-latest' && matrix.arch == 'arm'
        run: |
          file lib/build/libiec61850-ubuntu-latest-arm.a
          readelf -h lib/build/libiec61850-ubuntu-latest-arm.a || true
        shell: bash

      - name: Check library format for ARM64
        if: matrix.os == 'ubuntu-latest' && matrix.arch == 'arm64'
        run: |
          file lib/build/libiec61850-ubuntu-latest-arm64.a
          readelf -h lib/build/libiec61850-ubuntu-latest-arm64.a || true
        shell: bash

      - name: Prebuild binaries for Node.js 20
        if: matrix.os != 'windows-latest'
        run: |
          if [ "${{ matrix.os }}" == "macos-latest" ] && [ "${{ matrix.arch }}" == "x64" ]; then
            arch -x86_64 npm run prebuild -- --target 20.19.0 --arch x64 --macos-min-version=11.0
          elif [ "${{ matrix.os }}" == "ubuntu-latest" ] && [ "${{ matrix.arch }}" == "arm" ]; then
            export CC=arm-linux-gnueabihf-gcc
            export CXX=arm-linux-gnueabihf-g++
            export LINK=arm-linux-gnueabihf-g++
            npm run prebuild -- --target 20.19.0 --arch arm --cflags="-march=armv7-a -mfpu=vfp -mfloat-abi=hard"
          elif [ "${{ matrix.os }}" == "ubuntu-latest" ] && [ "${{ matrix.arch }}" == "arm64" ]; then
            export CC=aarch64-linux-gnu-gcc
            export CXX=aarch64-linux-gnu-g++
            export LINK=aarch64-linux-gnu-g++
            npm run prebuild -- --target 20.19.0 --arch arm64
          else
            npm run prebuild -- --target 20.19.0 --arch ${{ matrix.arch }}
          fi
        shell: bash

      - name: Prebuild binaries for Node.js 20 (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          npm run prebuild -- --arch x64
        shell: pwsh

      - name: Get package version
        id: package-version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
        shell: bash

      - name: Get prebuild file
        id: get-prebuild
        run: |
          echo "file=$(ls prebuilds/@amigo9090/ih-libiec61850-node-v${{ steps.package-version.outputs.version }}-node-v*.tar.gz | head -n 1)" >> $GITHUB_OUTPUT
        shell: bash

      - name: Determine platform for artifact name (Unix)
        if: matrix.os != 'windows-latest'
        id: determine-platform-unix
        run: |
          if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
            echo "platform=linux" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.os }}" == "macos-latest" ]; then
            echo "platform=darwin" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Determine platform for artifact name (Windows)
        if: matrix.os == 'windows-latest'
        id: determine-platform-windows
        run: |
          if ("${{ matrix.os }}" -eq "windows-latest") {
            echo "platform=win32" >> $env:GITHUB_OUTPUT
          }
        shell: pwsh

      - name: Upload prebuilt binaries to GitHub Releases
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          tag_name: v${{ steps.package-version.outputs.version }}
          files: ${{ steps.get-prebuild.outputs.file }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: addon_iec61850-${{ matrix.os }}-${{ matrix.arch }}
          path: ${{ steps.get-prebuild.outputs.file }}

  update-builds-and-publish:
    needs: build-and-upload
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.19.0'
          registry-url: 'https://registry.npmjs.org'

      - name: Debug npm config
        run: npm config list
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Verify npm authentication
        run: npm whoami
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Get package version
        id: package-version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
        shell: bash

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Update builds folder
        run: |
          # Очищаем папку builds, если она существует
          rm -rf builds
          mkdir -p builds

          # Карта соответствий для именования папок
          declare -A platform_map=(
            ["linux-arm"]="linux_arm"
            ["linux-arm64"]="linux_arm64"
            ["linux-x64"]="linux_x64"
            ["darwin-arm64"]="macos_arm64"
            ["darwin-x64"]="macos_x64"
            ["win32-x64"]="windows_x64"
          )

          # Выводим структуру артефактов для отладки
          echo "Artifact structure:"
          find artifacts -type f

          # Перебираем все скачанные артефакты
          for artifact_dir in artifacts/addon_iec61850-*; do
            echo "Processing artifact directory: $artifact_dir"
            if [ -d "$artifact_dir" ]; then
              for tarball in "$artifact_dir"/*.tar.gz; do
                if [ -f "$tarball" ]; then
                  echo "Processing tarball: $tarball"
                  # Извлекаем имя файла
                  filename=$(basename "$tarball")
                  echo "Filename: $filename"
                  # Извлекаем платформу и архитектуру из имени файла
                  platform_arch=$(echo "$filename" | sed -n 's/ih-libiec61850-node-v[0-9.]*-\(node-v[0-9]*\|napi\)-\(.*\)\.tar\.gz/\2/p')
                  echo "Extracted platform_arch: $platform_arch"
                  
                  # Проверяем, есть ли соответствие в карте
                  if [[ -n "${platform_map[$platform_arch]}" ]]; then
                    target_dir="builds/${platform_map[$platform_arch]}"
                    echo "Target directory: $target_dir"
                    mkdir -p "$target_dir"
                    
                    # Распаковываем tar.gz
                    tar -xzf "$tarball" -C "$target_dir" --strip-components=1
                    
                    # Проверяем содержимое распакованной директории
                    echo "Contents of $target_dir after extraction:"
                    ls -R "$target_dir"
                    
                    # Перемещаем addon_iec61850.node из Release в корень target_dir
                    if [ -f "$target_dir/Release/addon_iec61850.node" ]; then                
                      mv "$target_dir/Release/addon_iec61850.node" "$target_dir/"
                      rm -rf "$target_dir/Release"
                    else
                      mv "$target_dir/addon.node" "$target_dir/addon_iec61850.node" 2>/dev/null || true
                    fi
                  else
                    echo "Skipping unknown platform/arch: $platform_arch"
                  fi
                else
                  echo "No tar.gz files found in $artifact_dir"
                fi
              done
            else
              echo "Directory $artifact_dir does not exist"
            fi
          done

          # Проверяем содержимое папки builds
          echo "Builds folder contents:"
          ls -R builds
        shell: bash

      - name: Verify builds folder
        run: |
          for dir in linux_arm linux_arm64 linux_x64 macos_arm64 macos_x64 windows_x64; do
            if [ ! -f "builds/$dir/addon_iec61850.node" ]; then
              echo "Missing addon_iec61850.node in builds/$dir"
              exit 1
            fi
          done
        shell: bash

      - name: Check if version is unique
        run: |
          VERSION=$(node -p "require('./package.json').version")
          if npm view @amigo9090/ih-libiec61850-node@$VERSION version > /dev/null 2>&1; then
            echo "Version $VERSION already exists in npm!"
            exit 1
          fi
        shell: bash

      - name: Publish to npm
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          # Настраиваем Git для коммитов
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # Создаем временную копию package.json без scripts и devDependencies
          jq 'del(.scripts) | del(.devDependencies)' package.json > package_npm.json
          
          # Проверяем наличие изменений в builds/
          if git status --porcelain builds/ | grep .; then
            git add builds/
            git commit -m "Update builds for release"
          else
            echo "No changes to commit in builds/"
          fi
          
          # Обновляем версию в оригинальном package.json
          npm version patch -m "Release %s with updated builds"
          
          # Заменяем package.json на версию без scripts и devDependencies
          mv package_npm.json package.json
          # Публикуем в npm
          npm publish --access public
          
          # Восстанавливаем оригинальный package.json
          git checkout -- package.json

      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.RELEASE_TOKEN }}
          branch: main
          tags: true